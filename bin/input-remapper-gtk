#!/usr/bin/python3
# -*- coding: utf-8 -*-
# input-remapper - GUI for device specific keyboard mappings
# Copyright (C) 2024 sezanzeb <b8x45ygc9@mozmail.com>
#
# This file is part of input-remapper.
#
# input-remapper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# input-remapper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with input-remapper.  If not, see <https://www.gnu.org/licenses/>.

"""Starts the user interface."""

from __future__ import annotations

import atexit
import sys
from argparse import ArgumentParser

import gi

gi.require_version("Gtk", "3.0")
gi.require_version("GLib", "2.0")
gi.require_version("GtkSource", "4")
from gi.repository import Gtk

# https://github.com/Nuitka/Nuitka/issues/607#issuecomment-650217096
Gtk.init()

from inputremapper.gui.gettext import _, LOCALE_DIR
from inputremapper.gui.reader_service import ReaderService
from inputremapper.daemon import DaemonProxy
from inputremapper.logging.logger import logger


def start_processes() -> DaemonProxy:
    """Start reader-service and daemon via pkexec to run in the background."""
    # this function is overwritten in tests
    try:
        ReaderService.pkexec_reader_service()
    except Exception as e:
        logger.error(e)
        sys.exit(11)

    return Daemon.connect()


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        dest="debug",
        help=_("Displays additional debug information"),
        default=False,
    )

    options = parser.parse_args(sys.argv[1:])
    logger.update_verbosity(options.debug)
    logger.log_info("input-remapper-gtk")
    logger.debug("Using locale directory: {}".format(LOCALE_DIR))

    # TODO no. Importing files shouldn't run any code, so it shouldn't matter when the
    #  log-level is set.
    # import input-remapper stuff after setting the log verbosity
    from inputremapper.gui.messages.message_broker import MessageBroker, MessageType
    from inputremapper.configs.keyboard_layout import keyboard_layout
    from inputremapper.gui.data_manager import DataManager
    from inputremapper.gui.user_interface import UserInterface
    from inputremapper.gui.controller import Controller
    from inputremapper.injection.global_uinputs import GlobalUInputs, FrontendUInput
    from inputremapper.groups import _Groups
    from inputremapper.gui.reader_client import ReaderClient
    from inputremapper.daemon import Daemon
    from inputremapper.configs.global_config import GlobalConfig
    from inputremapper.configs.migrations import Migrations

    global_uinputs = GlobalUInputs(FrontendUInput)
    migrations = Migrations(global_uinputs)

    Migrations(global_uinputs).migrate()

    message_broker = MessageBroker()

    global_config = GlobalConfig()

    # create the reader before we start the reader-service (start_processes) otherwise
    # it can come to race conditions with the creation of pipes
    reader_client = ReaderClient(message_broker, _Groups())
    daemon = start_processes()

    data_manager = DataManager(
        message_broker,
        global_config,
        reader_client,
        daemon,
        global_uinputs,
        keyboard_layout,
    )
    controller = Controller(message_broker, data_manager)
    user_interface = UserInterface(message_broker, controller)
    controller.set_gui(user_interface)

    message_broker.signal(MessageType.init)

    def stop():
        if isinstance(daemon, Daemon):
            # have fun debugging completely unrelated tests if you remove this
            daemon.stop_all()

        controller.close()

    atexit.register(stop)

    Gtk.main()
